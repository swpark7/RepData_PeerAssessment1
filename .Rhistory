y <- apply(matrix(sample(6, n*nsim, replace=T), nsim), 1, mean)
y1 <- (y-3.5)/1.71*sqrt(n)
hist(y1)
mean(y1)
sd(y1)
n <- 30
nsim <- 10000
y <- apply(matrix(sample(6, n*nsim, replace=T), nsim), 1, mean)
y1 <- (y-3.5)/1.71*sqrt(n)
hist(y1)
mean(y)
sd(y)
n <- 20
nsim <- 10000
y <- apply(matrix(sample(6, n*nsim, replace=T), nsim), 1, mean)
y1 <- (y-3.5)/1.71*sqrt(n)
hist(y1)
mean(y)
sd(y)
?hist
plot(density(y))
plot(density(y1))
plot(density(y1))
plot(density(y))
plot(density(y1))
lines(1:1000, dnorm(1:1000))
lines(1:1000, dnorm(1:1000), col="red")
lines(1:1000, dnorm(1:1000, 0, 1), col="red")
sx <- rnrom(1000)
sx <- rnorm(1000)
plot(density(sx))
plot(density(sx))
plot(density(sx))
sx <- rnorm(10000)
plot(density(sx))
plot(density(rnrom(10000000)))
plot(density(rnorm(10000000)))
plot(density(rnorm(1000000)))
drnom(1)
dnrom(1)
dnorm(1)
n <- 20
nsim <- 10000
y <- apply(matrix(sample(6, n*nsim, replace=T), nsim), 1, mean)
y1 <- (y-3.5)/1.71*sqrt(n)
hist(y1)
mean(y)
sd(y)
lines(density(rnorm(1000000)))
\
lines(density(rnorm(1000000)))
n <- 20
nsim <- 10000
y <- apply(matrix(sample(6, n*nsim, replace=T), nsim), 1, mean)
y1 <- (y-3.5)/1.71*sqrt(n)
plot(density(y1))
mean(y)
sd(y)
lines(density(rnorm(1000000)), color="red")
n <- 20
nsim <- 10000
y <- apply(matrix(sample(6, n*nsim, replace=T), nsim), 1, mean)
y1 <- (y-3.5)/1.71*sqrt(n)
plot(density(y1))
mean(y)
sd(y)
lines(density(rnorm(1000000)), col="red")
n <- 10
nsim <- 10000
y <- apply(matrix(sample(6, n*nsim, replace=T), nsim), 1, mean)
y1 <- (y-3.5)/1.71*sqrt(n)
plot(density(y1))
mean(y)
sd(y)
lines(density(rnorm(1000000)), col="red")
k <- 1000
xvals <- seq(-5, 5, length = k)
myplot <- function(df){
d <- data.frame(y = c(dnorm(xvals), dt(xvals, df)),
x = xvals,
dist = factor(rep(c("Normal", "T"), c(k,k))))
g <- ggplot(d, aes(x = x, y = y))
g <- g + geom_line(size = 2, aes(colour = dist))
g
}
manipulate(myplot(mu), mu = slider(1, 20, step = 1))
library(manipulate)
k <- 1000
xvals <- seq(-5, 5, length = k)
myplot <- function(df){
d <- data.frame(y = c(dnorm(xvals), dt(xvals, df)),
x = xvals,
dist = factor(rep(c("Normal", "T"), c(k,k))))
g <- ggplot(d, aes(x = x, y = y))
g <- g + geom_line(size = 2, aes(colour = dist))
g
}
manipulate(myplot(mu), mu = slider(1, 20, step = 1))
seq(-5,5)
?seq
x <- seq(-5,5, length=1000)
y = dnorm(x)
plot(x, y)
x <- seq(-5,5, length=100)
y = dnorm(x)
plot(x, y)
plot(x, y, type="line")
?plot
plot(x, y, type="l")
t <- dt(x)
?dt
t <- dt(x, 2)
plot(x, y, type="l")
plot(x, t, type="l")
x <- seq(-5,5, length=100)
plot(x, dnorm(x), type="l")
?line
plot(x, dnorm(x), type="l")
line(x, dt(x, 1), col="red")
?line
x <- seq(-5,5, length=100)
plot(x, dnorm(x), type="l")
line(x, dt(x, 1))
x <- seq(-5,5, length=100)
plot(x, dnorm(x), type="l")
lines(x, dt(x, 1))
x <- seq(-5,5, length=100)
plot(x, dnorm(x), type="l")
lines(x, dt(x, 1), color="red")
x <- seq(-5,5, length=100)
plot(x, dnorm(x), type="l")
lines(x, dt(x, 1), col="red")
x <- seq(-5,5, length=100)
plot(x, dnorm(x), type="l")
lines(x, dt(x, 5), col="red")
x <- seq(-5,5, length=100)
plot(x, dnorm(x), type="l")
lines(x, dt(x, 9), col="red")
x <- seq(-5,5, length=100)
plot(x, dnorm(x), type="l")
lines(x, dt(x, 19), col="red")
x <- seq(-5,5, length=100)
plot(x, dnorm(x), type="l")
lines(x, dt(x, 999), col="red")
k <- 1000
xvals <- seq(-5, 5, length = k)
myplot <- function(df){
d <- data.frame(y = c(dnorm(xvals), dt(xvals, df)),
x = xvals,
dist = factor(rep(c("Normal", "T"), c(k,k))))
g <- ggplot(d, aes(x = x, y = y))
g <- g + geom_line(size = 2, aes(colour = dist))
g
}
manipulate(myplot(mu), mu = slider(1, 20, step = 1))
data(sleep)
head(sleep)
dim(sleep)
sleep
?t.test
g1 <- sleep$extra[1 : 10]; g2 <- sleep$extra[11 : 20]
difference <- g2 - g1
mn <- mean(difference); s <- sd(difference); n <- 10
t.test(difference)
t.test(g2, g1, paired=TRUE)
mn + c(-1, 1) * qt(.975, n-1) * s/sqrt(n)
t.test(g2, g1, paired = FALSE, var.equal = TRUE)$conf
t.test(g2, g1, paired = FALSE)$conf
library(datasets); data(ChickWeight); library(reshape2)
##define weight gain or loss
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
names(wideCW)[-(1 : 2)] <- paste("time", names(wideCW)[-(1 : 2)], sep = "")
library(dplyr)
wideCW <- mutate(wideCW,
gain = time21 - time0
)
View(ChickWeight)
View(wideCW)
table(wideCW$Diet)
wideCW14 <- subset(wideCW, Diet %in% c(1, 4))
t.test(gain ~ Diet, paired = FALSE, var.equal = TRUE, data = wideCW14)
t.test(gain ~ Diet, paired = FALSE, var.equal = FALSE, data = wideCW14)
(32-30) + c(-1, 1) * qt(0.975, 32-1) * 10/sqrt(32)
(32-30) + c(-1, 1) * qt(0.975, 100-1) * 10/sqrt(100)
(32-30) + c(-1, 1) * qt(0.975, 16-1) * 10/sqrt(16)
father.son
library(UsingR); data(father.son)
t.test(father.son$sheight - father.son$fheight)
library(datasets); data(ChickWeight); library(reshape2)
##define weight gain or loss
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
names(wideCW)[-(1 : 2)] <- paste("time", names(wideCW)[-(1 : 2)], sep = "")
library(dplyr)
wideCW <- mutate(wideCW,
gain = time21 - time0
)
wideCW14 <- subset(wideCW, Diet %in% c(1, 4))
t.test(gain ~ Diet, paired = FALSE,
var.equal = TRUE, data = wideCW14)
wideCW14 <- subset(wideCW, Diet %in% c(1, 4))
t.test(gain ~ Diet, paired = FALSE, data = wideCW14)
pt(2.5, 15, lower.tail=FALSE)
pt(1, 15, lower.tail=FALSE)
pt(2, 15, lower.tail=FALSE)
pt(2, 10, lower.tail=FALSE)
pt(2, 5, lower.tail=FALSE)
pt(2, 4, lower.tail=FALSE)
pt(1, 15, lower.tail=FALSE)
pt(1, 30, lower.tail=FALSE)
pt(1, 3000, lower.tail=FALSE)
pt(1, 30000, lower.tail=FALSE)
pt(1.5, 30000, lower.tail=FALSE)
pt(1.5, 300000, lower.tail=FALSE)
pt(2, 300000, lower.tail=FALSE)
pt(2, 30, lower.tail=FALSE)
pt(2, 3, lower.tail=FALSE)
ppois(9, 5, lower.tail=FALSE)
ppois(8, 5, lower.tail=FALSE)
ppois(7, 5, lower.tail=FALSE)
alpha
alpha
library(manipulate)
mu0 = 30
myplot <- function(sigma, mua, n, alpha) {
g = ggplot(data.frame(mu = c(27, 36)), aes(x = mu))
g = g + stat_function(fun = dnorm, geom = "line", args = list(mean = mu0,
sd = sigma/sqrt(n)), size = 2, col = "red")
g = g + stat_function(fun = dnorm, geom = "line", args = list(mean = mua,
sd = sigma/sqrt(n)), size = 2, col = "blue")
xitc = mu0 + qnorm(1 - alpha) * sigma/sqrt(n)
g = g + geom_vline(xintercept = xitc, size = 3)
g
}
manipulate(myplot(sigma, mua, n, alpha), sigma = slider(1, 10, step = 1, initial = 4),
mua = slider(30, 35, step = 1, initial = 32), n = slider(1, 50, step = 1,
initial = 16), alpha = slider(0.01, 0.1, step = 0.01, initial = 0.05))
t.test(gain ~ Diet, paired = FALSE, data = wideCW14)
mu0 = 30
mua = 32
sigma = 4
n = 16
z = qnorm(1-0.05)
z
pnorm(mu0 + z * sigma/sqrt(n), mean=mua, sd=sigma/sqrt(n), lower.tail=F)
? power.t.test
power.t.test(n=16, delta=2/4, sd=1, type="one.sample", alt="one.sided")
power.t.test(n=16, delta=2, sd=4, type="one.sample", alt="one.sided")
?t.test
power.t.test(n=16, power=0.8, sd=4, type="one.sample", alt="one.sided")
power.t.test(n=16, power=0.8, sd=4, type="one.sample", alt="one.sided")$delta
?t.test
base <- c(140, 138, 150, 148, 135)
w2 <- c(132, 135, 151, 146, 130)
diff <- w2 - base
diff
sd(diff)
t.test(diff, alternative="two.sided")
t.test(diff)
t.test(diff, alternative="two.sided")
1100 + c(-1, 1) * qt(0.975, 8) * 30/sqrt(9)
se <- (0.75-0.5)/0.5/sqrt(4)
se <- (0.75-0.5)/0.5*sqrt(4)
pt(1, 3)
?pt
pt(1, 3, lower.tail=FALSE)
pt(2, 3, lower.tail=FALSE)
pt(2, 3)
1-pt(2, 3)
se <- (0.75-0.5)/0.75*sqrt(4)
se
pt(se*2, 3)
1 - pt(se*2, 3)
se <- (0.75-0.5)/1*sqrt(4)
pt(0.5,3, lower.tail=F)
1 - pt(0.5,3, lower.tail=F)
u0 <- c(0.5, 0.5, 0.5, 0.5)
u1 <- c(0, 1, 1, 1)
diff <- u1 - u0
t(diff)
t.test(diff)
?t.test
t.test(diff, alternative=c("one.sided"))
t.test(diff, alternative=c("less"))
t.test(diff, alternative=c("greater"))
t.test(diff)
u0 <- 1/100
u1 <- 10/1787
var <- 10/1787
u1 <- 3/4
u0 <- 1/2
v <- 0.25
z <- (u1-u0)/sqrt(0.25/4)
pval <- pnorm(z, lower.tail=F)
pnorm(z, lower.tail=F)
pnorm(z, lower.tail=F) * 2
pnorm(z)
sqrt(0.25/4)
pt(z,3)
?pt
pt(z,3, lower.tail=F)
pt(z,3, lower.tail=F)/2
u0 <- 1/100
u1 <- 1/1787
u1 <- 10/1787
var <- u0
var <- u1
(u1-u0)/sqrt(var/1787)
z <- (u1-u0)/sqrt(var/1787)
pt(z, 1796)
p1 <- 0.75
p0 <- 0.5
n <- 4
z <- (p1-p0)/sqrt(p0*(1-p0)/n)
z
pnomr(z, lower.tail=F)
pnorm(z, lower.tail=F)
pt(z, 3, lower.tail=F)
pt(z, 3, lower.tail=F) * 2
1- pt(z, 3, lower.tail=F) * 2
pt(z*2, 3, lower.tail=F) * 2
pt(z*2, 3, lower.tail=F)
pt(z, 3, lower.tail=F)
pt(z, 3)
prop.test(12, 20, p=0.5, correct=FALSE)
prop.test(12, 20, p=0.5)
?prop.test
?prop.test(3, 4, p=0.5)
prop.test(3, 4, p=0.5)
prop.test(3, 4, p=0.5, alternative=c("greater"))
prop.test(3, 4, p=0.5, alternative=c("less"))
prop.test(3, 4, p=0.5, correct)
prop.test(3, 4, p=0.5, correct=F)
prop.test(10, 1787, p=(1/100), correct=F)
prop.test(10, 1787, p=(1/100))
prop.test(10, 1787, p=(1/100), alternative=c("less"))
prop.test(10, 1787, p=(1/100), correct=F)
prop.test(10, 1787, p=(1/100), correct=F).p
names(prop.test(10, 1787, p=(1/100), correct=F))
prop.test(10, 1787, p=(1/100), correct=F)$p.value
prop.test(10, 1787, p=(1/100))$p.value
prop.test(10, 1787, p=(1/100), correct=F)$p.value
prop.test(10, 1787, p=(1/100), alternative=c("less"))$p.value
prop.test(10, 1787, p=(1/100), alternative=c("less"), correct=F)$p.value
?t.test
?lm
mean(7921+5284+8836+4761)
(4761 - mean(7921+5284+8836+4761))
(4761 - mean(7921+5284+8836+4761))/(8836-4761)
mean(c(7921, 5284, 8836, 4761))
mean(c(7921, 5184, 8836, 4761))
(4761-mean(c(7921, 5184, 8836, 4761)))/(8836-4761)
mean(c(89,72,94,69))
89 -mean(c(89,72,94,69))
(89 - mean(c(89,72,94,69)))(94-69)
(89 - mean(c(89,72,94,69)))/(94-69)
install.packages("coefplot")
gc()
pwd()
cdwd()
setwd("c:/GitHub/RepData_PeerAssessment1/")
data <- read.csv("activity.csv")
View(data)
library(ddply)
library(ddplyr)
install.packages("ddplyr")
install.packages("dplyr")
library(ddplyr)
library(dplyr)
summary(data)
filter(data, !is.na(steps))
head(filter(data, !is.na(steps)))
summary(filter(data, !is.na(steps)))
summary(data)
library(datasets)
library(dplyr)
?library
data1 <- summary(filter(data, !is.na(steps)))
?group_by
group_by(data1, date) %>% summarise(sum(steps))
class(data)
class(data1)
data1 <- data[!is.na(data$steps), ]
group_by(data1, date) %>% summarise(sum(steps))
hist(group_by(data1, date) %>% summarise(sum(steps)))
h <- group_by(data1, date) %>% summarise(sum(steps))
hist(h$sum(steps))
h <- group_by(data1, date) %>% summarise(n=sum(steps))
hist(h$n
)
?hist
hist(h$n, xlab="hello")
total_steps <- group_by(data1, date) %>% summarise(n=sum(steps))$n
total_steps <- (group_by(data1, date) %>% summarise(n=sum(steps)))$n
hist(total_steps)
daily_steps <- (group_by(data1, date) %>% summarise(n=sum(steps)))$n
hist(daily_steps)
mean(daily_steps)
median(daily_steps)
?plot
head(data1)
plot(interval, steps)
plot(data1$interval, data1$steps)
View(data1)
group_by(data1, interval) $>% summarise(n=sum(stemps))
group_by(data1, interval) %>% summarise(n=sum(steps))
group_by(data1, interval) %>% summarise(average_steps=sum(steps))
steps <- group_by(data1, interval) %>% summarise(average_steps=sum(steps))
plot(steps)
plot(steps, type='l')
max(steps)
steps
?arrange
?arrange(steps, average_steps)
arrange(steps, desc(average_steps))
arrange(steps, desc(average_steps))[1]
arrange(steps, desc(average_steps))[internal,1]
arrange(steps, desc(average_steps))[1,]
arrange(steps, desc(average_steps))[1,'internal']
arrange(steps, desc(average_steps))[1,"interval"]
sum(is.na(data))
sum(is.na(data),1)
sum(is.na(data),2)
?sum()
colSums(is.na(data))
head(data)
data[is.na(steps)]
data[is.na(steps),]
data[is.na(data$steps),]
data[is.na(data$steps),]
?join
?weekdays
?as.date
as.Date(data1$date, "%Y-%m-%d")
head(as.Date(data1$date, "%Y-%m-%d"))
weekday(as.Date(data1$date, "%Y-%m-%d"))
weekdays(as.Date(data1$date, "%Y-%m-%d"))
weekdays(as.Date(data1$date, "%Y-%m-%d")) IN ("Saturday","Sunday")
(weekdays(as.Date(data1$date, "%Y-%m-%d")) IN c("Saturday","Sunday"))
weekdays(as.Date(data1$date, "%Y-%m-%d")) %in% ("Saturday","Sunday")
weekdays(as.Date(data1$date, "%Y-%m-%d")) %in% c("Saturday","Sunday")
ifelse(weekdays(as.Date(data1$date, "%Y-%m-%d")) %in% c("Saturday","Sunday"), "weekend", "weekday)"
ifelse(weekdays(as.Date(data1$date, "%Y-%m-%d")) %in% c("Saturday","Sunday"), "weekend", "weekday)
ifelse(weekdays(as.Date(data1$date, "%Y-%m-%d")) %in% c("Saturday","Sunday"), "weekend", "weekday")
date1$week <- ifelse(weekdays(as.Date(data1$date, "%Y-%m-%d")) %in% c("Saturday","Sunday"), "weekend", "weekday")
data1$week <- as.factor(ifelse(weekdays(as.Date(data1$date, "%Y-%m-%d")) %in% c("Saturday","Sunday"), "weekend", "weekday"))
week_steps <- group_by(data1, week, interval) %>% summarise(average_steps=sum(steps))
View(week_steps)
library(ggplot)
library(ggplot2)
ggplot(data1, aes(x=interval, y=average_steps)) + geom_line()
ggplot(week_steps, aes(x=interval, y=average_steps)) + geom_line()
ggplot(week_steps, aes(x=interval, y=average_steps)) + geom_line() + facet_grid(.~week)
ggplot(week_steps, aes(x=interval, y=average_steps)) + geom_line() + facet_grid(week~.)
install.packages("ggplot2")
install.packages("ggplot2")
data(iris)
iris$Sepal.Length[iris$Species=="setosa"] <- NA
#Lets pretend Sepal.Length is orginal, Petal.Length is merged means
iris$Sepal.Length[is.na(iris$Sepal.Length)] <- iris$Petal.Length[is.na(iris$Sepal.Length)]
data(iris)
head(iris)
summary(iris)
iris$Sepal.Length[iris$Species=="setosa"] <- NA
summary(iris)
View(data)
head(data)
View(steps)
View(h)
merge(data, h, by.x="date", by.y="date")
head(merge(data, h, by.x="date", by.y="date"))
merged <- merge(data, h, by.x="date", by.y="date")
?merged
?merge
merged <- merge(data, steps, by.x="interval", by.y="interval")
merged
merged <- merge(data, steps, by.x="interval", by.y="interval")
head(merged)
merged$steps[is.na(merged$steps)]
merged$steps[is.na(merged$steps)] <- merged$average_steps[is.na(merged$steps)]
head(merged)
daily_steps <- (group_by(data1, date) %>% summarise(n=sum(steps)))$n
merged_daily_steps <- (group_by(merged, date) %>% summarise(n=sum(steps)))$n
par(mfrow=c(2,0))
hist(daily_steps)
hist(merged_daily_steps)
library(dplyr)
daily_steps <- (group_by(data1, date) %>% summarise(n=sum(steps)))$n
merged_daily_steps <- (group_by(merged, date) %>% summarise(n=sum(steps)))$n
par(mfrow=c(2,0))
hist(daily_steps)
hist(merged_daily_steps)
par(mfrow=c(2,1))
daily_steps <- (group_by(data1, date) %>% summarise(n=sum(steps)))$n
merged_daily_steps <- (group_by(merged, date) %>% summarise(n=sum(steps)))$n
par(mfrow=c(2,1))
hist(daily_steps)
hist(merged_daily_steps)
daily_steps <- (group_by(data1, date) %>% summarise(n=sum(steps)))$n
merged_daily_steps <- (group_by(merged, date) %>% summarise(n=sum(steps)))$n
par(mfrow=c(2,1))
hist(daily_steps, breaks=10)
hist(merged_daily_steps, breaks=10)
merged
merged_daily_steps
daily_steps
hist(merged_daily_steps)
mean(daily_steps)
median(daily_steps)
mean(merged_daily_steps)
median(merged_daily_steps)
View(merged)
par(mfrow=c(2,1))
